name: my-demo-pipeline
on:
  workflow_dispatch:
    inputs:
      image_name: 
      user_name:

jobs:
  first-job:
    runs-on: ubuntu-latest
    steps:
      - name: runner job
        uses: actions/checkout@v4

      - name: creating deployment
        run: |
          cat <<EOF > deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{ inputs.user_name }}-deployment
  labels:
    app: ${{ inputs.user_name }}-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ${{ inputs.user_name }}-app
  template:
    metadata:
      labels:
        app: ${{ inputs.user_name }}-app
    spec:
      containers:
      - name: ${{ inputs.user_name }}-container
        image: ${{ inputs.image_name }}
        ports:
        - containerPort: 80
EOF

      - name: creating service
        run: |
          cat <<EOF > service.yml
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: ${{ inputs.user_name }}-app
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30007
EOF

      - name: copying script to instance
        uses: betanzos/scp-upload@v1
        with:
          source: ./
          host: ${{ secrets.HOST }}
          port: '22'
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          remote_dir: '~'

  setup-job:
    runs-on: ubuntu-latest
    needs: first-job
    steps:
      - name: Exec cmd on remote server
        uses: Comori/ssh@v0.0.1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            cd ~
            chmod +x docker-setup.sh
            ./docker-setup.sh
            minikube start
            kubectl apply -f deployment.yml
            kubectl apply -f service.yml
